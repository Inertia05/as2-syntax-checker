{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://as2-syntax-checker/./src/extension.ts","webpack://as2-syntax-checker/external commonjs \"vscode\"","webpack://as2-syntax-checker/webpack/bootstrap","webpack://as2-syntax-checker/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"as2-syntax-checker\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tconst disposable = vscode.commands.registerCommand('as2-syntax-checker.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from AS2 Syntax Checker!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n\n    // 创建一个诊断集合，用于存储发现的错误\n    const diagnosticCollection = vscode.languages.createDiagnosticCollection('actionscript2');\n    context.subscriptions.push(diagnosticCollection);\n\n    // 当文档被打开或修改时触发语法检查\n    vscode.workspace.onDidOpenTextDocument(checkDocument);\n    vscode.workspace.onDidChangeTextDocument(event => checkDocument(event.document));\n\n    // 定义用于检查 AS2 文档的函数\n    function checkDocument(document: vscode.TextDocument) {\n        // 只检查 .as 文件（ActionScript 2.0 文件）\n        if (document.languageId !== 'actionscript') {\n            return;\n        }\n\n        let diagnostics: vscode.Diagnostic[] = [];\n\n        // 检查缺少分号的错误\n        diagnostics.push(...checkMissingSemicolons(document));\n        // 检查括号不匹配的错误\n        diagnostics.push(...checkUnmatchedBrackets(document));\n\n        // 将诊断结果设置为当前文档的诊断集合\n        diagnosticCollection.set(document.uri, diagnostics);\n    }\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n\n// 检查缺少分号的函数\nfunction checkMissingSemicolons(document: vscode.TextDocument): vscode.Diagnostic[] {\n    let diagnostics: vscode.Diagnostic[] = [];\n    let lines = document.getText().split(/\\r?\\n/);\n\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim();\n\n        // 忽略空行和注释行\n        if (line !== \"\" && !line.startsWith(\"//\")) {\n            // 检查行是否没有以分号结束，忽略大括号的行\n            if (!line.endsWith(\";\") && !line.endsWith(\"{\") && !line.endsWith(\"}\")) {\n                let range = new vscode.Range(i, line.length, i, line.length);\n                let diagnostic = new vscode.Diagnostic(\n                    range,\n                    '缺少分号',\n                    vscode.DiagnosticSeverity.Warning\n                );\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n\n    return diagnostics;\n}\n\n// 检查括号不匹配的函数\nfunction checkUnmatchedBrackets(document: vscode.TextDocument): vscode.Diagnostic[] {\n    let diagnostics: vscode.Diagnostic[] = [];\n    let text = document.getText();\n    let stack: { char: string, position: vscode.Position }[] = [];\n    let line = 0, column = 0;\n\n    // 遍历文档中的每一个字符\n    for (let i = 0; i < text.length; i++) {\n        let char = text[i];\n\n        if (char === '\\n') {\n            line++;\n            column = 0;\n            continue;\n        }\n\n        column++;\n\n        // 如果遇到开括号，压入栈中\n        if (char === '(' || char === '{' || char === '[') {\n            stack.push({ char, position: new vscode.Position(line, column) });\n        } else if (char === ')' || char === '}' || char === ']') {\n            // 如果遇到闭括号，检查是否有匹配的开括号\n            let last = stack.pop();\n            if (!last || !isMatchingPair(last.char, char)) {\n                // 没有匹配的开括号，报告错误\n                let range = new vscode.Range(line, column, line, column);\n                let diagnostic = new vscode.Diagnostic(\n                    range,\n                    `不匹配的括号: ${char}`,\n                    vscode.DiagnosticSeverity.Error\n                );\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n\n    // 检查剩下的未闭合的开括号\n    while (stack.length > 0) {\n        let unmatched = stack.pop();\n        let range = new vscode.Range(unmatched!.position, unmatched!.position);\n        let diagnostic = new vscode.Diagnostic(\n            range,\n            `不匹配的括号: ${unmatched!.char}`,\n            vscode.DiagnosticSeverity.Error\n        );\n        diagnostics.push(diagnostic);\n    }\n\n    return diagnostics;\n}\n\n// 检查是否匹配的括号\nfunction isMatchingPair(open: string, close: string): boolean {\n    return (open === '(' && close === ')') ||\n           (open === '{' && close === '}') ||\n           (open === '[' && close === ']');\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","diagnosticCollection","languages","createDiagnosticCollection","checkDocument","document","languageId","diagnostics","lines","getText","split","i","length","line","trim","startsWith","endsWith","range","Range","diagnostic","Diagnostic","DiagnosticSeverity","Warning","checkMissingSemicolons","text","stack","column","char","position","Position","last","pop","open","close","Error","unmatched","checkUnmatchedBrackets","set","uri","workspace","onDidOpenTextDocument","onDidChangeTextDocument","event","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}